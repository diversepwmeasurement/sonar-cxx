defaults:
  run:
    shell: bash
jobs:
  build-linux:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      name: Dump GitHub Context
      run: echo "$GITHUB_CONTEXT"
    - continue-on-error: true
      env:
        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      name: Dump Matrix Context
      run: echo "$MATRIX_CONTEXT"
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - continue-on-error: true
      name: Set up JDK Java ${{ matrix.java }} | ${{ matrix.distribution }} | ${{
        matrix.os }}
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      id: pom-version
      name: get-pom-version
      uses: andreacomo/maven-gav-extractor@v2
    - continue-on-error: true
      run: echo "CXX_POM_VERSION=${{ steps.pom-version.outputs.version }}" >> $GITHUB_ENV
    - continue-on-error: true
      run: echo "CXX_VERSION=${CXX_POM_VERSION%-*}" >> $GITHUB_ENV
    - continue-on-error: true
      name: Sets the current project's version
      run: mvn versions:set -DartifactId='cxx' -DnewVersion='${{ env.CXX_VERSION }}.${{
        github.run_number }}'
    - continue-on-error: true
      name: Dump environment variables
      run: env
    - continue-on-error: true
      name: Build and test with Maven
      run: mvn -B -e -V verify --file pom.xml
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest' && matrix.java == '11' && matrix.distribution
        == 'temurin'
      name: Collect JAR files
      run: 'mkdir staging

        cp sonar-cxx-plugin/target/*.jar staging

        cp cxx-sslr-toolkit/target/*.jar staging

        rm -f staging/original-*.jar

        rm -f staging/*-sources.jar

        '
    - continue-on-error: true
      if: hashFiles('staging') != ''
      name: Packaging workflow data as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: JAR_Files
        path: staging
    strategy:
      matrix:
        distribution:
        - temurin
        java:
        - '11'
        os:
        - ubuntu-latest
  build-windows:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      name: Dump GitHub Context
      run: echo "$GITHUB_CONTEXT"
    - continue-on-error: true
      env:
        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      name: Dump Matrix Context
      run: echo "$MATRIX_CONTEXT"
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK Java ${{ matrix.java }} | ${{ matrix.distribution }} | ${{
        matrix.os }}
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Adapt TMP folder on Windows OS
      run: 'echo "TMP=$USERPROFILE\AppData\Local\Temp" >> $GITHUB_ENV

        echo "TEMP=$USERPROFILE\AppData\Local\Temp" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Dump environment variables
      run: env
    - continue-on-error: true
      name: Build and test with with Maven
      run: mvn -B -e -V verify --file pom.xml
    strategy:
      matrix:
        distribution:
        - temurin
        java:
        - '11'
        os:
        - windows-latest
  integration-linux:
    needs:
    - build-linux
    - verify-rules
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Dump Matrix context
      run: echo '${{ toJSON(matrix) }}'
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK Java ${{ matrix.java }} | ${{ matrix.distribution }} | ${{
        matrix.os }}
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.7'
    - continue-on-error: true
      run: pip install -r "$GITHUB_WORKSPACE/integration-tests/requirements.txt"
    - continue-on-error: true
      name: Create root folder
      run: mkdir test
    - continue-on-error: true
      name: Set up SonarQube (Download)
      run: 'pushd test

        wget -nv --timeout=10 https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${{
        matrix.sonarqube }}.zip

        unzip -qq sonarqube-${{ matrix.sonarqube }}.zip

        popd

        '
    - continue-on-error: true
      name: Set up SonarScanner (Download)
      run: 'pushd test

        wget -nv --timeout=10 https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{
        matrix.sonarscanner }}.zip

        unzip -qq sonar-scanner-cli-${{ matrix.sonarscanner }}.zip

        popd

        '
    - continue-on-error: true
      name: Download cxx plugin
      uses: actions/download-artifact@v4
      with:
        name: JAR_Files
    - continue-on-error: true
      name: restore cxx plugin
      run: 'mkdir -p $GITHUB_WORKSPACE/sonar-cxx-plugin/target

        cp sonar-cxx-plugin*.jar $GITHUB_WORKSPACE/sonar-cxx-plugin/target

        '
    - continue-on-error: true
      name: Set test environment (Linux)
      run: 'echo "SONAR_JAVA_PATH=$JAVA_HOME/bin/java" >> $GITHUB_ENV

        echo "SONARHOME=$GITHUB_WORKSPACE/test/sonarqube-${{ matrix.sonarqube }}"
        >> $GITHUB_ENV

        echo "SONARLOG=$GITHUB_WORKSPACE/test/sonarqube-${{ matrix.sonarqube }}/logs"
        >> $GITHUB_ENV

        echo "$GITHUB_WORKSPACE/test/sonar-scanner-${{ matrix.sonarscanner }}/bin"
        >> $GITHUB_PATH

        echo "TestDataFolder=$GITHUB_WORKSPACE/integration-tests/testdata" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Dump environment variables
      run: env
    - continue-on-error: true
      name: Prepare test data (Linux)
      run: 'find "$TestDataFolder" -name ''*.xml'' -exec sed -i "s|/home/travis/build/SonarOpenCommunity/sonar-cxx|$GITHUB_WORKSPACE|g"
        ''{}'' \;

        '
    - continue-on-error: true
      name: Run integration tests (Linux)
      run: behave --no-capture --tags=SqApi79
      shell: bash
    - continue-on-error: true
      if: always()
      name: Collect LOG files
      run: cp -v *.log "$SONARLOG"
    - continue-on-error: true
      if: always()
      name: Upload LOG files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: LOG_sonarqube_${{ matrix.sonarqube }}_java_${{ matrix.java }}_os_${{
          matrix.os }}
        path: ${{ env.SONARLOG }}
    strategy:
      matrix:
        distribution:
        - temurin
        exclude:
        - java: '17'
          sonarqube: 8.9.10.61524
        - java: '11'
          sonarqube: 9.9.4.87374
        java:
        - '11'
        - '17'
        os:
        - ubuntu-latest
        sonarqube:
        - 8.9.10.61524
        - 9.9.4.87374
        sonarscanner:
        - 4.8.0.2856
  integration-windows:
    needs:
    - build-linux
    - build-windows
    - verify-rules
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Dump Matrix context
      run: echo '${{ toJSON(matrix) }}'
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK Java ${{ matrix.java }} | ${{ matrix.distribution }} | ${{
        matrix.os }}
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.7'
    - continue-on-error: true
      run: pip install -r "$GITHUB_WORKSPACE/integration-tests/requirements.txt"
    - continue-on-error: true
      name: Create root folder
      run: mkdir test
    - continue-on-error: true
      name: Set up SonarQube (Download)
      run: 'pushd test

        C:\msys64\usr\bin\wget.exe -nv --timeout=10 https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${{
        matrix.sonarqube }}.zip

        unzip -qq sonarqube-${{ matrix.sonarqube }}.zip

        popd

        '
      shell: cmd
    - continue-on-error: true
      name: Set up SonarScanner for Windows (Download)
      run: 'pushd test

        C:\msys64\usr\bin\wget -nv --timeout=10 https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{
        matrix.sonarscanner }}.zip

        unzip -qq sonar-scanner-cli-${{ matrix.sonarscanner }}.zip

        popd

        '
      shell: cmd
    - continue-on-error: true
      name: Download cxx plugin
      uses: actions/download-artifact@v4
      with:
        name: JAR_Files
    - continue-on-error: true
      name: restore cxx plugin
      run: 'mkdir -p $GITHUB_WORKSPACE/sonar-cxx-plugin/target

        cp sonar-cxx-plugin*.jar $GITHUB_WORKSPACE/sonar-cxx-plugin/target

        '
    - continue-on-error: true
      name: Set Up SonarQube environment (Windows)
      run: 'echo "SONAR_JAVA_PATH=$JAVA_HOME\bin\java.exe" >> $GITHUB_ENV

        echo "SONARHOME=$GITHUB_WORKSPACE\test\sonarqube-${{ matrix.sonarqube }}"
        >> $GITHUB_ENV

        echo "SONARLOG=$GITHUB_WORKSPACE\test\sonarqube-${{ matrix.sonarqube }}\logs"
        >> $GITHUB_ENV

        echo "$GITHUB_WORKSPACE\test\sonar-scanner-${{ matrix.sonarscanner }}\bin"
        >> $GITHUB_PATH

        echo "TestDataFolder=$GITHUB_WORKSPACE\integration-tests\testdata" >> $GITHUB_ENV

        echo "TMP=$USERPROFILE\AppData\Local\Temp" >> $GITHUB_ENV

        echo "TEMP=$USERPROFILE\AppData\Local\Temp" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Dump environment variables
      run: env
    - continue-on-error: true
      name: Prepare test data (Windows)
      run: 'Get-ChildItem "$env:TestDataFolder\*.log" -Recurse | ForEach { (Get-Content
        $_).Replace(''C:\projects\sonar-cxx'', "$env:GITHUB_WORKSPACE") | Set-Content
        $_ }

        '
      shell: pwsh
    - continue-on-error: true
      name: Run integration tests (Windows)
      run: behave --no-capture --tags=SqApi79
      shell: cmd
    - continue-on-error: true
      if: always()
      name: Collect LOG files
      run: cp -v *.log "$SONARLOG"
    - continue-on-error: true
      if: always()
      name: Upload LOG files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: LOG_sonarqube_${{ matrix.sonarqube }}_java_${{ matrix.java }}_os_${{
          matrix.os }}
        path: ${{ env.SONARLOG }}
    strategy:
      matrix:
        distribution:
        - temurin
        exclude:
        - java: '17'
          sonarqube: 8.9.10.61524
        - java: '11'
          sonarqube: 9.9.4.87374
        java:
        - '11'
        - '17'
        os:
        - windows-latest
        sonarqube:
        - 8.9.10.61524
        - 9.9.4.87374
        sonarscanner:
        - 4.8.0.2856
  sonar-cloud:
    if: github.event_name == 'push'
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      name: Dump GitHub Context
      run: echo "$GITHUB_CONTEXT"
    - continue-on-error: true
      env:
        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      name: Dump Matrix Context
      run: echo "$MATRIX_CONTEXT"
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - continue-on-error: true
      name: Set up JDK Java ${{ matrix.java }} | ${{ matrix.distribution }} | ${{
        matrix.os }}
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      id: pom-version
      name: get-pom-version
      uses: andreacomo/maven-gav-extractor@v2
    - continue-on-error: true
      run: echo "CXX_POM_VERSION=${{ steps.pom-version.outputs.version }}" >> $GITHUB_ENV
    - continue-on-error: true
      run: echo "CXX_VERSION=${CXX_POM_VERSION%-*}" >> $GITHUB_ENV
    - continue-on-error: true
      name: Sets the current project's version
      run: mvn versions:set -DartifactId='cxx' -DnewVersion='${{ env.CXX_VERSION }}.${{
        github.run_number }}'
    - continue-on-error: true
      name: Dump environment variables
      run: env
    - continue-on-error: true
      name: Build and test with Maven
      run: mvn -B -e -V install --file pom.xml
    - continue-on-error: true
      name: Set up JDK Java 17
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      name: Dump environment variables
      run: env
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      name: Update SonarCloud results
      run: mvn sonar:sonar -B -e -V -Dsonar.organization=sonaropencommunity -Dsonar.host.url=https://sonarcloud.io
        -Dsonar.token=$SONAR_TOKEN -Dsonar.python.version=3.8
    strategy:
      matrix:
        distribution:
        - temurin
        java:
        - '11'
        os:
        - ubuntu-latest
  successfully-finished:
    needs:
    - integration-windows
    - integration-linux
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: github.event_name == 'push'
      name: Download JAR files
      uses: actions/download-artifact@v4
      with:
        name: JAR_Files
    - continue-on-error: true
      if: github.event_name == 'push'
      uses: marvinpinto/action-automatic-releases@latest
      with:
        automatic_release_tag: latest-snapshot
        files: './*.jar

          '
        prerelease: true
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        title: Latest Snapshot
    - continue-on-error: true
      run: echo SUCCESS
    strategy:
      matrix:
        os:
        - ubuntu-latest
  verify-rules:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.7'
    - continue-on-error: true
      name: Install xmllint
      run: 'sudo apt-get update -y

        sudo apt-get install -y libxml2-utils

        '
    - continue-on-error: true
      name: Install HTML Tidy
      run: 'wget -nv --timeout=10 https://github.com/htacg/tidy-html5/releases/download/5.8.0/tidy-5.8.0-Linux-64bit.deb

        sudo dpkg -i tidy-5.8.0-Linux-64bit.deb

        '
    - continue-on-error: true
      name: Verify rule files
      run: bash ./cxx-sensors/src/tools/check_rules.sh
    strategy:
      matrix:
        os:
        - ubuntu-latest
name: cxx plugin CI
on:
  repository_dispatch:
    types: trigger-ga___cxx-ci.yml
